# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [14.x]

    defaults:
          run:
            working-directory: ./src
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install ChromeDriver
        run: |
          CHROME_VERSION=$(google-chrome --version | cut -f 3 -d ' ' | cut -d '.' -f 1) \
            && CHROMEDRIVER_RELEASE=$(curl --location --fail --retry 3 http://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}) \
            && curl --silent --show-error --location --fail --retry 3 --output /tmp/chromedriver_linux64.zip "http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_RELEASE/chromedriver_linux64.zip" \
            && cd /tmp \
            && unzip chromedriver_linux64.zip \
            && rm -rf chromedriver_linux64.zip \
            && sudo mv chromedriver /usr/local/bin/chromedriver \
            && sudo chmod +x /usr/local/bin/chromedriver \
            && chromedriver --version           
          export DISPLAY=:99
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 & # optional, disables headless mode
          google-chrome --version
      - name: npm install, build, and test
        run: |
          npm ci
          npm run build --if-present
          npm test
        env:
          CI: true
          LAMBDA_ASSET_PATH: lambda:/soda/assets:KEY:SECRET
          AUTH_HOST: dev.api.mydomain.com
          AUTH_PATH: /oauth2/token
          API_HOST: dev.api.mydomain.com
          PERFECTO_USER: someone@somewhere.com
          PERFECTO_HOST: mydomain.perfectomobile.com
          PERFECTO_PASSWORD: something
          MAINTAINER_NAME: Some Name
          MAINTAINER_EMAIL: soda_name@mydomain.com
          SMTP_HOST: mail.mydomain.com
          SMTP_FROM_ADDRESS: soda@mydomain.com
          KEY16: jdhfuejehdmeushd
          KEY24: jdhfuejehdmeushdJJJ@KJDF
          KEY32: jdhfuejehdmeushdJJJ@JHUHGTFEDSCV
          WINDOWS_SERVER: MYSERVERNAME
